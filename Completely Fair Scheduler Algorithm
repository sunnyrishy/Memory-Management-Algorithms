#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Process {
    int pid;
    int burstTime;         // Total time needed
    int executedTime = 0;  // Time it has run
    int vruntime = 0;      // Virtual runtime
};

// Comparator: process with least vruntime gets scheduled first
bool compareVruntime(const Process& a, const Process& b) {
    return a.vruntime < b.vruntime;
}

void simulateCFS(vector<Process>& processes, int timeSlice) {
    cout << "Simulating CFS Scheduling:\n";

    while (true) {
        // Remove finished processes
        processes.erase(
            remove_if(processes.begin(), processes.end(),
                      [](const Process& p) { return p.executedTime >= p.burstTime; }),
            processes.end());

        if (processes.empty()) break;

        // Sort by virtual runtime (CFS style)
        sort(processes.begin(), processes.end(), compareVruntime);

        // Pick the process with lowest vruntime
        Process& current = processes.front();
        cout << "Running Process P" << current.pid << " for " << timeSlice << "ms\n";

        current.executedTime += timeSlice;
        current.vruntime += timeSlice;

        cout << "â†’ Executed: " << current.executedTime << "/" << current.burstTime
             << " | VRuntime: " << current.vruntime << "\n\n";
    }

    cout << "All processes completed.\n";
}

int main() {
    vector<Process> processes = {
        {1, 10},
        {2, 20},
        {3, 15}
    };

    int timeSlice = 5; // Simulated time slice (ms)

    simulateCFS(processes, timeSlice);

    return 0;
}
